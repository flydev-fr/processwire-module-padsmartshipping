<?php namespace ProcessWire;

class PadSmartShippingCountries extends Process Implements WirePageEditor {
  public static function getModuleInfo() {
    return array(
      'title' => 'PadSmartShipping - List of Countries with VAT',
      'version' => 1,
      'summary' => 'Add an admin menu to define countries with VAT categories for shipping',
      'icon' => 'cart-plus',
      'href' => 'https://github.com/jvaubourg/processwire-module-padsmartshipping',
      'author' => 'Julien Vaubourg',
      'permission' => 'padloper-admin',
      'permissions' => 'padloper-admin',
      'requires' => 'PadLoper',
      'page' => array(
        'name' => 'padsmartshipping-countries',
        'parent' => 'setup',
        'title' => 'SmartShipping Countries',
      ),
    );
  }

  public function execute() {
    $scripts = __DIR__ . "/PadProcessTabs.js";
    $this->config->scripts->add($scripts);
    
    $this->modules->get('JqueryWireTabs');
    $wrapper = new InputfieldWrapper();
    $wrapper->attr('class', 'ui-helper-clearfix');

    $countries = $this->pages->find("template=padsmartshipping_country");

    foreach($countries as $country) {
      $tab = new InputfieldWrapper();
      $tab->attr('id', $country->name);
      $tab->attr('title', $country->title);
      $tab->attr('class', 'WireTab');

      $markup = $this->modules->get('InputfieldMarkup');
      $markup->label = $country->title;
      $markup->icon = 'globe';

      $button = $this->modules->get('InputfieldButton');
      $button->attr('href', "./edit/?id={$country->id}");
      $button->attr('icon', 'balance-scale');
      $button->attr('value', $this->_("Edit VAT rates"));

      if($country->pad_smartshipping_country_vatrates->count) {
        $table = $this->modules->get('MarkupAdminDataTable');
        $table->setEncodeEntities(false);
        $fields = $country->pad_smartshipping_country_vatrates->first()->fields;
        $headerFields = array();

        foreach($fields as $field) {
          $headerFields[] = $field->label;
        }

        $table->headerRow($headerFields);

        foreach($country->pad_smartshipping_country_vatrates as $ptr) {
          $fieldValues = array();

          foreach($ptr->fields as $field) {
            $fieldValues[] = $ptr->get($field->name);
          }

          $table->row($fieldValues);
        }

        $markup->value .= '<br />' . $table->render();

      } else {
        $button->attr('value', $this->_("Add VAT rates"));
        $message = $this->_("This country doesn't have VAT rates yet.");
        $markup->value .= "<p class='description'>$message</p>";
      }
      
      $markup->value .= $button->render();
      $tab->add($markup);
      $wrapper->add($tab);
    }

    $button = $this->modules->get('InputfieldButton');
    $button->attr('wrapClass', 'ui-helper-clearfix');
    $button->attr('href', './edit/?id=0');
    $button->attr('icon', 'plus-circle');
    $button->attr('value', $this->_("Add new Country"));

    $out = $wrapper->render();
    $out .= '<br />';
    $out .= $button->render();

    return $out;
  }

  public function executeEdit() {
    $this->breadcrumbs->add(new Breadcrumb('../', $this->page->title));

    $country = $this->pages->get((int) $this->input->get('id'));

    if($country->id > 0) {
      Wire::setFuel('processHeadline', $this->_("Edit Country:") . " {$country->title}");

    } else {
      Wire::setFuel('processHeadline', $this->_("Add new Country"));

      $country = new Page();
      $country->template = 'padsmartshipping_country';
      $country->parent = $this->pages->get('template=admin, name=padsmartshipping-countries');
      $country->title = $this->_("New country class");
      $country->save();

      $this->session->redirect("./?id={$country->id}");
    }

    $pe = $this->modules->get('ProcessPageEdit');
    
    return $pe->execute();
  }

  public function getPage() {
    return $this->page;
  }

  // inspired from PadProcessShipping
  public function install() {
    parent::install();

    $fields = $this->getFieldData();
    $field_names = '';

    foreach($fields as $field_name => $field_data) {
      $f = new Field();
      $f->setImportData($field_data);
      $f->save();
      $field_names .= "$field_name ";
    }

    $this->message("Created fields $field_names");

    $templates = $this->getTemplateData();
    $template_names = '';

    foreach($templates as $template_name => $template_data) {
      $fg = new Fieldgroup();
      $fg->name = $template_name;
      $template_names .= "$template_name ";

      foreach($template_data['fieldgroupFields'] as $fieldname) {
        $fg->add($fieldname);
      }

      $fg->save();

      $t = new Template();
      $t->setImportData($template_data) ;
      $t->save();
    }

    $this->message("Created templates $template_names");

    $vatrates_pagetable = $this->fields->get("pad_smartshipping_country_vatrates");
    $vatrates_template = $this->templates->get("padsmartshipping_country_vatrates");
    $vatrates_pagetable->template_id = $vatrates_template->id;
    $vatrates_pagetable->save();
  }

  public function uninstall() {
    $padpages = $this->pages->find("template=padsmartshipping_country_vatrates|padsmartshipping_country|padsmartshipping_countries, include=all");

    foreach($padpages as $p) {
      if($p->id) $this->pages->delete($p, true);
    }

    $templates = $this->getTemplateData();

    foreach($templates as $template_name => $template_data) {
      $t = $this->templates->get($template_name);
      if($t) $this->templates->delete($t);
      $fg = $this->fieldgroups->get($template_name);
      if($fg) $this->fieldgroups->delete($fg);
    }

    $fields = $this->getFieldData();

    foreach($fields as $field_name => $field_data) {
      $f = $this->fields->get($field_name);
      if($f) {
        $f->flags = Field::flagSystemOverride;
        $f->flags = 0;
        $this->fields->delete($f);
      }
    }
  }

  private function getFieldData() {
    $fields_json = file_get_contents(__DIR__ . "/data/countries_fields.json");
    return json_decode($fields_json, true);
  }

  private function getTemplateData() {
    $templates_json = file_get_contents(__DIR__ . "/data/countries_templates.json");
    return json_decode($templates_json, true);
  }
}
